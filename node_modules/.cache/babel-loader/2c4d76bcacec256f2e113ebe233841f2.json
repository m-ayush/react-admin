{"ast":null,"code":"var _jsxFileName = \"/data/ayush/exampe/atram-admin/src/Components/FormField.jsx\";\nimport React from \"react\"; // import { Select } from 'components/Select/Select';\n\nvar TextField = function TextField(props) {\n  var _props$meta = props.meta,\n      meta = _props$meta === void 0 ? {} : _props$meta;\n  console.log(\"meta\", meta);\n  var inputProps = {\n    type: props.type || \"text\",\n    className: \"form__input\",\n    name: props.input.name,\n    id: props.input.name,\n    readOnly: props.readOnly,\n    autoFocus: props.autoFocus,\n    autoComplete: props.autoComplete,\n    placeholder: props.placeholder,\n    maxLength: props.maxLength,\n    value: meta.uncontrolled ? undefined : props.input.value,\n    defaultValue: meta.uncontrolled ? props.defaultValue : undefined,\n    onChange: props.input.onChange\n  };\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, props.label && React.createElement(\"label\", {\n    htmlFor: props.input.name,\n    className: \"form__label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, props.label, props.required ? \" *\" : null), React.createElement(\"input\", Object.assign({}, inputProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })), meta.touched && meta.error ? React.createElement(\"div\", {\n    className: \"form__field-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nvar CheckBox = function CheckBox(props) {\n  var _props$meta2 = props.meta,\n      meta = _props$meta2 === void 0 ? {} : _props$meta2;\n  var checboxProps = {\n    type: \"checkbox\",\n    className: \"form__checkbox\",\n    name: props.input.name,\n    id: props.input.name,\n    value: props.input.value ? props.input.value : props.input.name,\n    defaultChecked: meta.uncontrolled ? props.defaultChecked : undefined,\n    onChange: props.input.onChange,\n    checked: props.input.checked\n  };\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({}, checboxProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    className: \"form__checkbox-label\",\n    htmlFor: props.input.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, props.label), meta.touched && meta.error ? React.createElement(\"div\", {\n    className: \"form__field-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, meta.error) : null);\n}; // const SelectField = props => {\n//   const { meta = {} } = props;\n//   const selectProps = {\n//     ...props,\n//     className: 'form__select',\n//     name: props.input.name,\n//     id: props.input.name\n//   };\n//   return (\n//     <React.Fragment>\n//       {props.label && (\n//         <label htmlFor={props.input.name} className=\"form__label\">\n//           {props.label}\n//           {props.required ? ' *' : null}\n//         </label>\n//       )}\n//       <Select {...selectProps} />\n//       {meta.touched && meta.error ? <div className=\"form__field-error\">{meta.error}</div> : null}\n//     </React.Fragment>\n//   );\n// };\n\n\nvar FormField = function FormField(props) {\n  console.log(\"formmmm props\", props);\n\n  switch (props.type) {\n    case \"checkbox\":\n      return React.createElement(CheckBox, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }));\n    // case \"select\":\n    //   return <SelectField {...props} />;\n\n    case \"input\":\n    default:\n      return React.createElement(TextField, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }));\n  }\n};\n\nexport { TextField, CheckBox, FormField };","map":{"version":3,"sources":["/data/ayush/exampe/atram-admin/src/Components/FormField.jsx"],"names":["React","TextField","props","meta","console","log","inputProps","type","className","name","input","id","readOnly","autoFocus","autoComplete","placeholder","maxLength","value","uncontrolled","undefined","defaultValue","onChange","label","required","touched","error","CheckBox","checboxProps","defaultChecked","checked","FormField"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { Select } from 'components/Select/Select';\n\nconst TextField = props => {\n  const { meta = {} } = props;\n\n  console.log(\"meta\", meta);\n\n  const inputProps = {\n    type: props.type || \"text\",\n    className: \"form__input\",\n    name: props.input.name,\n    id: props.input.name,\n    readOnly: props.readOnly,\n    autoFocus: props.autoFocus,\n    autoComplete: props.autoComplete,\n    placeholder: props.placeholder,\n    maxLength: props.maxLength,\n    value: meta.uncontrolled ? undefined : props.input.value,\n    defaultValue: meta.uncontrolled ? props.defaultValue : undefined,\n    onChange: props.input.onChange\n  };\n\n  return (\n    <React.Fragment>\n      {props.label && (\n        <label htmlFor={props.input.name} className=\"form__label\">\n          {props.label}\n          {props.required ? \" *\" : null}\n        </label>\n      )}\n      <input {...inputProps} />\n      {meta.touched && meta.error ? (\n        <div className=\"form__field-error\">{meta.error}</div>\n      ) : null}\n    </React.Fragment>\n  );\n};\n\nconst CheckBox = props => {\n  const { meta = {} } = props;\n\n  const checboxProps = {\n    type: \"checkbox\",\n    className: \"form__checkbox\",\n    name: props.input.name,\n    id: props.input.name,\n    value: props.input.value ? props.input.value : props.input.name,\n    defaultChecked: meta.uncontrolled ? props.defaultChecked : undefined,\n    onChange: props.input.onChange,\n    checked: props.input.checked\n  };\n\n  return (\n    <React.Fragment>\n      <input {...checboxProps} />\n      <label className=\"form__checkbox-label\" htmlFor={props.input.name}>\n        {props.label}\n      </label>\n      {meta.touched && meta.error ? (\n        <div className=\"form__field-error\">{meta.error}</div>\n      ) : null}\n    </React.Fragment>\n  );\n};\n\n// const SelectField = props => {\n//   const { meta = {} } = props;\n\n//   const selectProps = {\n//     ...props,\n//     className: 'form__select',\n//     name: props.input.name,\n//     id: props.input.name\n//   };\n\n//   return (\n//     <React.Fragment>\n//       {props.label && (\n//         <label htmlFor={props.input.name} className=\"form__label\">\n//           {props.label}\n//           {props.required ? ' *' : null}\n//         </label>\n//       )}\n//       <Select {...selectProps} />\n//       {meta.touched && meta.error ? <div className=\"form__field-error\">{meta.error}</div> : null}\n//     </React.Fragment>\n//   );\n// };\n\nconst FormField = props => {\n  console.log(\"formmmm props\", props);\n  switch (props.type) {\n    case \"checkbox\":\n      return <CheckBox {...props} />;\n    // case \"select\":\n    //   return <SelectField {...props} />;\n    case \"input\":\n    default:\n      return <TextField {...props} />;\n  }\n};\n\nexport { TextField, CheckBox, FormField };\n"]},"metadata":{},"sourceType":"module"}